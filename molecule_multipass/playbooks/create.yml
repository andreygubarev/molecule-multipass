---
- name: Create
  hosts: localhost
  gather_facts: false
  no_log: "{{ molecule_no_log }}"

  vars:
    multipass_vm_name: "instance"
    multipass_vm_cpus: 1
    multipass_vm_memory: 1024M
    multipass_vm_disk: 4G
    multipass_vm_image: "20.04"
    temp_folder: "/tmp"

  tasks:
    - name: Get executable path # noqa: command-instead-of-shell
      ansible.builtin.shell: "command -v multipass"
      register: multipass_path
      changed_when: false

    - name: Register executable path
      ansible.builtin.set_fact:
        multipass_cmd: "{{ multipass_path.stdout }}"

    - name: Generate OpenSSH key pair
      community.crypto.openssh_keypair:
        path: "{{ temp_folder }}/id_ed25519"
        type: ed25519
      register: multipass_ssh
      delegate_to: "localhost"

    - name: Create cloud-init from template
      ansible.builtin.template:
        src: "templates/cloud-init.yml.j2"
        dest: "{{ temp_folder }}/cloud-init.yml"

    - name: Launch instance
      ansible.builtin.command: >
        {{ multipass_cmd }} launch
        --name {{ multipass_vm_name }}
        --cpus {{ multipass_vm_cpus }}
        --memory {{ multipass_vm_memory }}
        --disk {{ multipass_vm_disk }}
        --cloud-init {{ temp_folder }}/cloud-init.yml
        {{ multipass_vm_image }}

    - name: Register instance info
      ansible.builtin.command: >
        {{ multipass_cmd }} info
        --format json
        {{ multipass_vm_name }}
      register: multipass_info

    - name: Populate instance info dict
      ansible.builtin.set_fact:
        multipass_instance: "{{ multipass_info.stdout | from_json }}"

    - name: Populate instance config dict
      ansible.builtin.set_fact:
        instance_conf_dict: {
          "instance": "{{ multipass_vm_name }}",
          "address": "{{ multipass_instance.info.instance.ipv4[0] }}",
          "user": "ubuntu",
          "port": "22",
          "identity_file": "{{ multipass_ssh.filename }}",
        }
      register: instance_config_dict

    - name: debug
      ansible.builtin.debug:
        var: instance_config_dict

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ instance_config_dict | map(attribute='ansible_facts.instance_conf_dict') | list }}"

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"

    - name: debug
      ansible.builtin.debug:
        var: molecule_instance_config
