---
- name: Create
  hosts: localhost
  gather_facts: false
  no_log: "{{ molecule_no_log }}"

  vars:
    multipass_executable: "multipass"
    multipass_vm_cpus: 1
    multipass_vm_memory: 1024M
    multipass_vm_disk: 4G
    multipass_vm_image: "20.04"
    temp_folder: "/tmp"

  tasks:
    - name: Get multipass executable path
      ansible.builtin.shell: "command -v {{ multipass_executable }}"
      register: multipass_path
      changed_when: false

    - name: Register multipass executable path
      ansible.builtin.set_fact:
        multipass_cmd: "{{ multipass_path.stdout }}"

    - name: Generate OpenSSH key pair
      community.crypto.openssh_keypair:
        path: "{{ temp_folder }}/id_ed25519"
        type: ed25519
      register: multipass_ssh

    - name: Create cloud-init from template
      ansible.builtin.template:
        src: "templates/cloud-init.yml.j2"
        dest: "{{ temp_folder }}/cloud-init.yml"

    - name: Launch VMs
      ansible.builtin.command: >
        {{ multipass_cmd }} launch
        --name {{ item.name }}
        --cpus {{ item.vm_cpus | default(multipass_vm_cpus) }}
        --memory {{ item.vm_memory | default(multipass_vm_memory) }}
        --disk {{ item.vm_disk | default(multipass_vm_disk) }}
        --cloud-init {{ temp_folder }}/cloud-init.yml
        {{ item.vm_image | default(multipass_vm_image) }}
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"
      async: 7200
      poll: 0
      register: multipass_launch

    - name: Wait for VMs to be ready
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ multipass_launch.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      register: multipass_launch_status
      until: multipass_launch_status.finished
      retries: 30
      delay: 10

    - name: Register VMs info
      ansible.builtin.command: >
        {{ multipass_cmd }} info
        --format json
        {{ item.name }}
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"
      register: multipass_instance_info

    - name: Parse VMs info
      ansible.builtin.set_fact:
        multipass_instance_info: "{{ multipass_instance_info.results | map(attribute='stdout') | map('from_json') | list | map(attribute='info') | combine }}"

    - name: debug
      ansible.builtin.debug:
        var: multipass_instance_info


    #   ansible.builtin.set_fact:
    #     _multipass_instance_info: "{{ _multipass_instance_info_raw.results | map(attribute='stdout') | map('from_json') | list }}"

    # - name: debug
    #   ansible.builtin.debug:
    #     var: _multipass_instance_info

    # - name: Convert VMs info to dict
    #   ansible.builtin.set_fact:
    #     multipass_instance_info: "{{ _multipass_instance_info | map(attribute='info') | map('combine') | list | items2dict(key_name='name', value_name='ipv4') }}"

    # - name: debug
    #   ansible.builtin.debug:
    #     var: multipass_instance_info

    # - name: Populate instance config dict
    #   ansible.builtin.set_fact:
    #     instance_conf_dict: {
    #       "instance": "{{ item.name }}",
    #       "address": "{{ multipass_instance_info[item.name][0] }}",
    #       "user": "ubuntu",
    #       "port": "22",
    #       "identity_file": "{{ multipass_ssh.filename }}",
    #     }
    #   loop: "{{ molecule_yml.platforms }}"
    #   loop_control:
    #     label: "{{ item.name }}"
    #   register: instance_config_dict

    # - name: debug
    #   ansible.builtin.debug:
    #     var: instance_config_dict

    # - name: Populate instance config dict
    #   ansible.builtin.set_fact:
    #     instance_conf_dict: {
    #       "instance": "{{ item.name }}",
    #       "address": "{{ multipass_instance.info.instance.ipv4[0] }}",
    #       "user": "ubuntu",
    #       "port": "22",
    #       "identity_file": "{{ multipass_ssh.filename }}",
    #     }
    #   loop: "{{ molecule_yml.platforms }}"
    #   loop_control:
    #     label: "{{ item.name }}"
    #   register: instance_config_dict

    # - name: debug
    #   ansible.builtin.debug:
    #     var: instance_config_dict

    # - name: Convert instance config dict to a list
    #   set_fact:
    #     instance_conf: "{{ instance_config_dict | map(attribute='ansible_facts.instance_conf_dict') | list }}"

    # - name: Dump instance config
    #   copy:
    #     content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
    #     dest: "{{ molecule_instance_config }}"

    # - name: debug
    #   ansible.builtin.debug:
    #     var: molecule_instance_config
